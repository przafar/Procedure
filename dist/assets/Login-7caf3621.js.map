{"version":3,"file":"Login-7caf3621.js","sources":["../../src/pages/auth/Login.vue"],"sourcesContent":["<template>\n  <VaForm ref=\"form\" @submit.prevent=\"submit\">\n    <h1 class=\"font-semibold text-4xl mb-4\">Log in</h1>\n    <p class=\"text-base mb-4 leading-5\">\n      New to Vuestic?\n      <RouterLink :to=\"{ name: 'signup' }\" class=\"font-semibold text-primary\">Sign up</RouterLink>\n    </p>\n    <VaInput\n      v-model=\"formData.email\"\n      class=\"mb-4\"\n      label=\"Email\"\n      type=\"email\"\n    />\n    <VaValue v-slot=\"isPasswordVisible\" :default-value=\"false\">\n      <VaInput\n        v-model=\"formData.password\"\n        :type=\"isPasswordVisible.value ? 'text' : 'password'\"\n        class=\"mb-4\"\n        label=\"Password\"\n        @clickAppendInner.stop=\"isPasswordVisible.value = !isPasswordVisible.value\"\n      >\n        <template #appendInner>\n          <VaIcon\n            :name=\"isPasswordVisible.value ? 'mso-visibility_off' : 'mso-visibility'\"\n            class=\"cursor-pointer\"\n            color=\"secondary\"\n          />\n        </template>\n      </VaInput>\n    </VaValue>\n\n    <div class=\"auth-layout__options flex flex-col sm:flex-row items-start sm:items-center justify-between\">\n      <VaCheckbox v-model=\"formData.keepLoggedIn\" class=\"mb-2 sm:mb-0\" label=\"Keep me signed in on this device\" />\n      <RouterLink :to=\"{ name: 'recover-password' }\" class=\"mt-2 sm:mt-0 sm:ml-1 font-semibold text-primary\">\n        Forgot password?\n      </RouterLink>\n    </div>\n\n    <div class=\"flex justify-center mt-4\">\n      <VaButton class=\"w-full\" @click=\"submit\"> Login</VaButton>\n    </div>\n  </VaForm>\n</template>\n\n<script lang=\"ts\" setup>\nimport { reactive } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { useForm, useToast } from 'vuestic-ui';\nimport { authStore } from '../../stores/auth';  // Import the auth store\n\nconst formData = reactive({\n  email: '',\n  password: '',\n  keepLoggedIn: false,\n});\n\nconst router = useRouter();\nconst { validate } = useForm('form');\nconst { init } = useToast();\nconst store = authStore();\n\nconst submit = async () => {\n  if (validate()) {\n    try {\n      // Call the login action from the store\n      await store.login(formData);\n\n      // Show success message\n      init({ message: \"You've successfully logged in\", color: 'success' });\n\n      // Redirect to dashboard\n      router.push({ name: 'dashboard' });\n    } catch (error) {\n      // Show error message\n      init({ message: 'Login failed. Please check your credentials.', color: 'danger' });\n    }\n  }\n};\n</script>\n"],"names":["formData","reactive","router","useRouter","validate","useForm","init","useToast","store","authStore","submit"],"mappings":"4dAkDA,MAAMA,EAAWC,EAAS,CACxB,MAAO,GACP,SAAU,GACV,aAAc,EAAA,CACf,EAEKC,EAASC,IACT,CAAE,SAAAC,CAAA,EAAaC,EAAQ,MAAM,EAC7B,CAAE,KAAAC,GAASC,IACXC,EAAQC,IAERC,EAAS,SAAY,CACzB,GAAIN,IACE,GAAA,CAEI,MAAAI,EAAM,MAAMR,CAAQ,EAG1BM,EAAK,CAAE,QAAS,gCAAiC,MAAO,SAAW,CAAA,EAGnEJ,EAAO,KAAK,CAAE,KAAM,WAAa,CAAA,OACnB,CAEdI,EAAK,CAAE,QAAS,+CAAgD,MAAO,QAAU,CAAA,CACnF,CACF"}