{"version":3,"file":"ShowPage-66926668.js","sources":["../../src/pages/patients/ShowPage.vue"],"sourcesContent":["<template>\n  <div class=\"container w-full px-2 sm:px-4 custom-h-screen\">\n    <!-- Top left button -->\n    <div class=\"flex justify-start mb-4\">\n      <button @click=\"appointmentModalView\" class=\"bg-blue-500 text-white px-4 py-2 rounded shadow hover:bg-blue-600\">\n        {{ $t('createAppointment') }}\n      </button>\n    </div>\n\n    <!-- Patient Details -->\n    <div v-if=\"patient\" class=\"grid grid-cols-1 md:grid-cols-12 gap-6 w-full h-auto\">\n      <!-- Block 1: Patient Information -->\n      <div class=\"col-span-12 md:col-span-4 bg-gray-100 p-4 sm:p-6 rounded-lg shadow-lg info-block\">\n        <h2 class=\"text-lg sm:text-xl font-semibold mb-4\">{{ $t('patientInfo') }}</h2>\n        <div class=\"space-y-2\">\n          <div class=\"bg-white p-3 rounded-lg shadow-sm\">\n            <h3 class=\"text-md font-semibold\">{{ $t('patientId') }}</h3>\n            <p class=\"text-gray-700 text-sm\">{{ patient.id }}</p>\n          </div>\n          <div class=\"bg-white p-3 rounded-lg shadow-sm\">\n            <h3 class=\"text-md font-semibold\">{{ $t('fullName') }}</h3>\n            <p class=\"text-gray-700 text-sm\">{{ patient.full_name }}</p>\n          </div>\n          <div class=\"bg-white p-3 rounded-lg shadow-sm\">\n            <h3 class=\"text-md font-semibold\">{{ $t('passport') }}</h3>\n            <p class=\"text-gray-700 text-sm\">{{ formatIdentifiers(patient.identifier) }}</p>\n          </div>\n          <div class=\"bg-white p-3 rounded-lg shadow-sm\">\n            <h3 class=\"text-md font-semibold\">{{ $t('birthDate') }}</h3>\n            <p class=\"text-gray-700 text-sm\">{{ formatDate(patient.birth_date) }}</p>\n          </div>\n          <div class=\"bg-white p-3 rounded-lg shadow-sm\">\n            <h3 class=\"text-md font-semibold\">{{ $t('phoneNumber') }}</h3>\n            <p class=\"text-gray-700 text-sm\">{{ patient.phone_number || $t('noPhoneNumber') }}</p>\n          </div>\n          <div class=\"bg-white p-3 rounded-lg shadow-sm\">\n            <h3 class=\"text-md font-semibold\">{{ $t('gender') }}</h3>\n            <p class=\"text-gray-700 text-sm\">{{ patient.gender === '1' ? $t('male') : $t('female') }}</p>\n          </div>\n        </div>\n      </div>\n\n      <!-- Block 2: Patient History -->\n      <div class=\"col-span-12 md:col-span-8 bg-white rounded-lg shadow-lg history-block custom-h-screen-minus-300\">\n        <h2 class=\"text-lg sm:text-xl font-semibold sticky top-0 bg-white z-10 pt-4 sm:pt-6 px-4 sm:px-6\">\n          {{ $t('appointments') }}\n        </h2>\n\n        <div class=\"p-4 sm:p-6\" v-if=\"state.appointments.length > 0\">\n          <ul class=\"space-y-4\">\n            <li\n              v-for=\"(item, index) in state.appointments\"\n              :key=\"item.id\"\n              class=\"relative p-4 rounded-lg shadow-sm transition-colors bg-gray-50\"\n            >\n              <!-- Status badge -->\n              <span\n                class=\"absolute right-2 top-2 px-3 py-1 rounded-full text-sm font-bold shadow-sm\"\n                :class=\"statusClass(item.status)\"\n              >\n                {{ $t(item.status) }}\n              </span>\n              <router-link :to=\"{ name: 'appointment-show', params: { id: item.id } }\" class=\"block\">\n                <h4 class=\"font-bold text-gray-700\">{{ $t('appointment') }} #{{ index + 1 }}</h4>\n              </router-link>\n              <p class=\"text-gray-600\">{{ $t('createdAt') }}: {{ formatData(item.created_at) }}</p>\n              <p class=\"text-gray-600\">{{ $t('direction') }}: <b>{{ item.encounter_class.code }}</b> {{ item.encounter_class.display }}</p>\n              <p class=\"text-gray-600\">{{ $t('appointmentType') }}: {{ item.encounter_type.display }}</p>\n              <p class=\"text-gray-600\">{{ $t('note') }}: {{ item.reason_text }}</p>\n            </li>\n          </ul>\n        </div>\n        <div class=\"p-5\" v-else>\n          <p class=\"text-gray-500\">{{ $t('noAppointments') }}</p>\n        </div>\n\n\n\n      </div>\n    </div>\n\n    <div v-else class=\"text-center\">\n      <p class=\"text-gray-500\">{{ $t('loadingPatientData') }}</p>\n    </div>\n\n    <!-- Modal for creating an appointment -->\n    <VaModal\n      v-slot=\"{ cancel, ok }\"\n      v-model=\"appointmentVisible\"\n      size=\"medium\"\n      mobile-fullscreen\n      close-button\n      hide-default-actions\n      :before-cancel=\"beforeEditFormModalClose\"\n    >\n      <h1>{{ $t('createAppointment') }}</h1>\n      <div class=\"flex flex-col gap-4 w-full mt-4\">\n        <div class=\"w-full\">\n          <VaSelect\n            v-model=\"state.newAppointment.role\"\n            :label=\"$t('selectDirection')\"\n            class=\"w-full\"\n            :options=\"getEncounterClasses\"\n            text-by=\"display\"\n            value-by=\"code\"\n          />\n        </div>\n        <div class=\"w-full\">\n          <VaTextarea :label=\"$t('note')\" v-model=\"state.newAppointment.text\" class=\"w-full\" />\n        </div>\n        <div class=\"w-full flex justify-end\">\n          <VaButton @click=\"onSave\">{{ $t('create') }}</VaButton>\n        </div>\n      </div>\n    </VaModal>\n  </div>\n</template>\n\n\n<script setup lang=\"ts\">\nimport { ref, reactive, computed, onMounted, watch } from 'vue';\nimport { useRoute } from 'vue-router';\nimport moment from 'moment';\nimport { patientStore } from '../../stores/patient';\nimport { ServicesStore } from '../../stores/services';\nimport { appointmentStore } from '../../stores/appointment';\n\nconst route = useRoute();\nconst patientId = route.params.id;\nconst store = patientStore();\nconst encounter = ServicesStore();\nconst appointment = appointmentStore();\n\nconst patient = ref(null);\nconst loading = ref(true);\nconst appointmentVisible = ref(false);\n\nconst getEncounterClasses = computed(() => encounter.getEncounterClasses);\nconst getEncounterTypes = computed(() => encounter.getEncounterTypes);\n\nconst state = reactive({\n  newAppointment: {\n    role: '',\n    type: '',\n    text: ''\n  },\n  appointments: [],\n});\n\nwatch(() => state.newAppointment.role, async (newRoleCode) => {\n  if (newRoleCode) {\n    try {\n      await encounter.GET_LIST_OF_ECOUNTER_TYPES(newRoleCode);\n    } catch (error) {\n      console.error('Failed to fetch encounter types:', error);\n    }\n  }\n});\n\nconst fetchDetails = async () => {\n  loading.value = true;\n  try {\n    const params = {\n      patient_id: patientId,\n      page: 1,\n      per_page: 10\n    };\n    const response = await store.GET_BY_ID(patientId);\n    const appointments = await appointment.GET_LIST_OF_APPOINTMENTS(params);\n    patient.value = {\n      ...response,\n      full_name: `${response.last_name} ${response.first_name} ${response.middle_name}`\n    };\n    state.appointments = appointments.data.data;\n  } catch (error) {\n    console.error('Failed to fetch patient data:', error);\n  } finally {\n    loading.value = false;\n  }\n};\n\nconst formatIdentifiers = (identifiers) => {\n  if (!identifiers || identifiers.length === 0) return 'No Document';\n  return identifiers.map(identifier => `${identifier.display}: ${identifier.value}`).join(', ');\n};\n\nconst formatDate = (dateStr) => {\n  const date = new Date(dateStr);\n  return date.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });\n};\n\nconst appointmentModalView = async () => {\n  appointmentVisible.value = true;\n  await encounter.GET_LIST_OF_ECOUNTER_CLASSES();\n};\n\nconst beforeEditFormModalClose = async (hide: () => unknown) => {\n  hide();\n};\n\nconst formatData = (date) => {\n  return moment(date).format('DD-MM-YYYY HH:mm');\n};\n\nconst statusClass = (status) => {\n  switch (status) {\n    case 'in-progress':\n      return 'bg-yellow-300 text-yellow-900';\n    case 'completed':\n      return 'bg-green-300 text-green-900';\n    case 'canceled':\n      return 'bg-red-300 text-red-900';\n    case 'draft':\n      return 'bg-gray-300 text-gray-900';\n    default:\n      return 'bg-gray-200 text-gray-700';\n  }\n};\n\nconst onSave = async () => {\n  const payload = {\n    patient_id: patientId,\n    encounter_class: state.newAppointment.role,\n    reason_text: state.newAppointment.text\n  };\n  await appointment.CREATE_APPOINTMENT(payload);\n  await fetchDetails();\n  appointmentVisible.value = false;\n};\n\nonMounted(async () => {\n  await fetchDetails();\n});\n</script>\n\n<style scoped>\nhtml, body {\n  padding: 0;\n  margin: 0;\n}\n\n.container {\n  max-width: 100%;\n  padding: 0;\n}\n\n.bg-white {\n  background-color: #fff;\n}\n\n.bg-gray-50 {\n  background-color: #f9fafb;\n}\n\n.bg-gray-100 {\n  background-color: #f7fafc;\n}\n\n.shadow-sm {\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);\n}\n\n.shadow-lg {\n  box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);\n}\n\n.text-center {\n  text-align: center;\n}\n\n.text-gray-700 {\n  color: #4a4a4a;\n}\n\n.text-gray-600 {\n  color: #718096;\n}\n\n.text-gray-500 {\n  color: #a0aec0;\n}\n\n.space-y-4 > * + * {\n  margin-top: 1rem;\n}\n\n.status-badge {\n  font-size: 0.875rem;\n  font-weight: bold;\n  padding: 0.25rem 0.75rem;\n  border-radius: 9999px; /* Fully rounded */\n  position: absolute;\n  top: 0.75rem;\n  right: 0.75rem;\n}\n\n.overflow-auto {\n  overflow: auto;\n}\n\n.custom-h-screen {\n  height: auto;\n}\n\n.custom-h-screen-minus-300 {\n  height: auto;\n  overflow: auto;\n}\n\n@media (min-width: 768px) {\n  .custom-h-screen {\n    height: 100vh;\n  }\n\n  .custom-h-screen-minus-300 {\n    height: calc(100vh - 200px);\n    overflow: auto;\n    scroll-behavior: smooth;\n    -webkit-overflow-scrolling: touch;\n  }\n}\n\n</style>\n"],"names":["patientId","useRoute","store","patientStore","encounter","ServicesStore","appointment","appointmentStore","patient","ref","loading","appointmentVisible","getEncounterClasses","computed","state","reactive","watch","newRoleCode","error","fetchDetails","params","response","appointments","formatIdentifiers","identifiers","identifier","formatDate","dateStr","appointmentModalView","beforeEditFormModalClose","hide","formatData","date","moment","statusClass","status","onSave","payload","onMounted"],"mappings":"y9DAgIM,MAAAA,EADQC,IACU,OAAO,GACzBC,EAAQC,IACRC,EAAYC,IACZC,EAAcC,IAEdC,EAAUC,EAAI,IAAI,EAClBC,EAAUD,EAAI,EAAI,EAClBE,EAAqBF,EAAI,EAAK,EAE9BG,EAAsBC,EAAS,IAAMT,EAAU,mBAAmB,EAC9CS,EAAS,IAAMT,EAAU,iBAAiB,EAEpE,MAAMU,EAAQC,EAAS,CACrB,eAAgB,CACd,KAAM,GACN,KAAM,GACN,KAAM,EACR,EACA,aAAc,CAAC,CAAA,CAChB,EAEDC,EAAM,IAAMF,EAAM,eAAe,KAAM,MAAOG,GAAgB,CAC5D,GAAIA,EACE,GAAA,CACI,MAAAb,EAAU,2BAA2Ba,CAAW,QAC/CC,EAAO,CACN,QAAA,MAAM,mCAAoCA,CAAK,CACzD,CACF,CACD,EAED,MAAMC,EAAe,SAAY,CAC/BT,EAAQ,MAAQ,GACZ,GAAA,CACF,MAAMU,EAAS,CACb,WAAYpB,EACZ,KAAM,EACN,SAAU,EAAA,EAENqB,EAAW,MAAMnB,EAAM,UAAUF,CAAS,EAC1CsB,EAAe,MAAMhB,EAAY,yBAAyBc,CAAM,EACtEZ,EAAQ,MAAQ,CACd,GAAGa,EACH,UAAW,GAAGA,EAAS,SAAS,IAAIA,EAAS,UAAU,IAAIA,EAAS,WAAW,EAAA,EAE3EP,EAAA,aAAeQ,EAAa,KAAK,WAChCJ,EAAO,CACN,QAAA,MAAM,gCAAiCA,CAAK,CAAA,QACpD,CACAR,EAAQ,MAAQ,EAClB,CAAA,EAGIa,EAAqBC,GACrB,CAACA,GAAeA,EAAY,SAAW,EAAU,cAC9CA,EAAY,IAAkBC,GAAA,GAAGA,EAAW,OAAO,KAAKA,EAAW,KAAK,EAAE,EAAE,KAAK,IAAI,EAGxFC,EAAcC,GACL,IAAI,KAAKA,CAAO,EACjB,mBAAmB,QAAS,CAAE,KAAM,UAAW,MAAO,OAAQ,IAAK,SAAW,CAAA,EAGtFC,EAAuB,SAAY,CACvCjB,EAAmB,MAAQ,GAC3B,MAAMP,EAAU,8BAA6B,EAGzCyB,EAA2B,MAAOC,GAAwB,CACzDA,GAAA,EAGDC,EAAcC,GACXC,EAAOD,CAAI,EAAE,OAAO,kBAAkB,EAGzCE,EAAeC,GAAW,CAC9B,OAAQA,EAAQ,CACd,IAAK,cACI,MAAA,gCACT,IAAK,YACI,MAAA,8BACT,IAAK,WACI,MAAA,0BACT,IAAK,QACI,MAAA,4BACT,QACS,MAAA,2BACX,CAAA,EAGIC,EAAS,SAAY,CACzB,MAAMC,EAAU,CACd,WAAYrC,EACZ,gBAAiBc,EAAM,eAAe,KACtC,YAAaA,EAAM,eAAe,IAAA,EAE9B,MAAAR,EAAY,mBAAmB+B,CAAO,EAC5C,MAAMlB,EAAa,EACnBR,EAAmB,MAAQ,EAAA,EAG7B,OAAA2B,EAAU,SAAY,CACpB,MAAMnB,EAAa,CAAA,CACpB"}